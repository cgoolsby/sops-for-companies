name: Validate Secrets

on:
  pull_request:
    paths:
      - 'secrets/**/*.enc.yaml'
      - 'examples/**/*.enc.yaml'
      - '.sops.yaml'
  push:
    branches:
      - main
    paths:
      - 'secrets/**/*.enc.yaml'
      - '.sops.yaml'

jobs:
  validate:
    name: Validate Secret Encryption
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install SOPS
        run: |
          curl -LO https://github.com/getsops/sops/releases/download/v3.8.1/sops-v3.8.1.linux.amd64
          sudo mv sops-v3.8.1.linux.amd64 /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops
      
      - name: Install age
        run: |
          curl -LO https://github.com/FiloSottile/age/releases/download/v1.1.1/age-v1.1.1-linux-amd64.tar.gz
          tar xzf age-v1.1.1-linux-amd64.tar.gz
          sudo mv age/age /usr/local/bin/
          sudo mv age/age-keygen /usr/local/bin/
          sudo chmod +x /usr/local/bin/age /usr/local/bin/age-keygen
      
      - name: Validate .sops.yaml syntax
        run: |
          echo "Validating .sops.yaml configuration..."
          python3 -c "import yaml; yaml.safe_load(open('.sops.yaml'))" || exit 1
          echo "✅ .sops.yaml syntax is valid"
      
      - name: Check all secrets are encrypted
        run: |
          echo "Checking that all secret files are properly encrypted..."
          failed=0
          
          for file in $(find secrets examples -name "*.enc.yaml" -type f); do
            echo "Checking: $file"
            
            # Check if file has SOPS metadata
            if ! grep -q "sops:" "$file" 2>/dev/null; then
              echo "❌ ERROR: $file is not encrypted with SOPS!"
              failed=1
            else
              echo "✅ $file is properly encrypted"
            fi
            
            # Verify the file is not plaintext
            if grep -q "password:" "$file" 2>/dev/null || grep -q "api_key:" "$file" 2>/dev/null; then
              if ! grep -q "ENC\[AES256_GCM" "$file" 2>/dev/null; then
                echo "⚠️  WARNING: $file may contain unencrypted sensitive data!"
                failed=1
              fi
            fi
          done
          
          if [ $failed -eq 1 ]; then
            echo "❌ Some secrets are not properly encrypted!"
            exit 1
          else
            echo "✅ All secrets are properly encrypted"
          fi
      
      - name: Verify key references
        run: |
          echo "Verifying all key references in .sops.yaml..."
          
          # Extract all key references
          keys=$(grep -o '\*[a-z0-9_]*_key' .sops.yaml | sort -u)
          
          echo "Found key references:"
          echo "$keys"
          
          # Check each reference has a definition
          failed=0
          for key_ref in $keys; do
            key_name=$(echo "$key_ref" | sed 's/\*/\&/')
            if ! grep -q "$key_name " .sops.yaml; then
              echo "❌ ERROR: $key_ref is referenced but not defined!"
              failed=1
            else
              echo "✅ $key_ref is properly defined"
            fi
          done
          
          if [ $failed -eq 1 ]; then
            exit 1
          fi
      
      - name: Check for duplicate keys
        run: |
          echo "Checking for duplicate key definitions..."
          
          # Find duplicate age keys
          duplicates=$(grep -o 'age1[a-z0-9]\{58\}' .sops.yaml | sort | uniq -d)
          
          if [ -n "$duplicates" ]; then
            echo "❌ ERROR: Duplicate keys found:"
            echo "$duplicates"
            exit 1
          else
            echo "✅ No duplicate keys found"
          fi
      
      - name: Validate creation rules
        run: |
          echo "Validating creation rules cover all secret paths..."
          
          # Check that all secret directories have rules
          for dir in secrets/dev secrets/staging secrets/production; do
            if [ -d "$dir" ]; then
              pattern=$(echo "$dir" | sed 's/\//\\\//g')
              if ! grep -q "path_regex:.*$pattern" .sops.yaml; then
                echo "⚠️  WARNING: No creation rule for $dir"
              else
                echo "✅ Creation rule exists for $dir"
              fi
            fi
          done
      
      - name: Security audit
        run: |
          echo "Running security audit..."
          
          # Check for hardcoded secrets in scripts
          if grep -r "age-secret-key" scripts/ 2>/dev/null; then
            echo "❌ ERROR: Hardcoded private keys found in scripts!"
            exit 1
          fi
          
          # Check for exposed private keys
          if find . -name "*.txt" -o -name "*.key" | xargs grep -l "AGE-SECRET-KEY" 2>/dev/null; then
            echo "❌ ERROR: Private keys found in repository!"
            exit 1
          fi
          
          echo "✅ Security audit passed"
      
      - name: Generate validation report
        if: always()
        run: |
          echo "## 📊 Secret Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Files Checked" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find secrets examples -name "*.enc.yaml" -type f | wc -l | xargs echo "Total encrypted files:"
          find secrets examples -name "*.enc.yaml" -type f | wc -l | xargs echo "Total encrypted files:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Statistics" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          grep -c "&.*_key age1" .sops.yaml | xargs echo "Total keys configured:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY